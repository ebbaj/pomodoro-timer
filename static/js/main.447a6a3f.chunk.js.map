{"version":3,"sources":["components/Break.jsx","components/Session.jsx","components/TimeLeft.jsx","App.js","reportWebVitals.js","index.js"],"names":["Break","breakLength","decrementBreakLengthByOneMinute","incrementBreakLengthByOneMinute","breakLengthInMinutes","moment","duration","minutes","className","id","onClick","Session","sessionLength","decrementSessionLengthByOneMinute","incrementSessionLengthByOneMinute","sessionLengthInMinutes","asMinutes","momentDurationFormatSetup","TimeLeft","timerLabel","handleStartStopClick","startStopButtonLabel","timeLeft","formattedTimeLeft","format","trim","App","audioElement","useRef","useState","currentSessionType","setCurrentSessionType","intervalId","setIntervalId","setSessionLength","setBreakLength","setTimeLeft","useEffect","current","play","isStarted","newSessionLength","clearInterval","newIntervalId","setInterval","prevTimeLeft","load","newBreakLength","ref","src","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.447a6a3f.chunk.js","sourcesContent":["import moment from \"moment\";\nimport React from \"react\";\n\nconst Break = ({\n  breakLength,\n  decrementBreakLengthByOneMinute,\n  incrementBreakLengthByOneMinute,\n}) => {\n  //Convert seconds in to minutes using moment.js\n  const breakLengthInMinutes = moment.duration(breakLength, \"s\").minutes();\n  return (\n    <div className=\"set-time-div\" id=\"break-div\">\n      <h3 id=\"break-label\">Break time</h3>\n      <p id=\"break-length\">{breakLengthInMinutes}</p>\n      <div>\n        <button\n          className=\"increment-decrement-button\"\n          onClick={decrementBreakLengthByOneMinute}\n        >\n          -\n        </button>\n        <button\n          className=\"increment-decrement-button\"\n          onClick={incrementBreakLengthByOneMinute}\n        >\n          +\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Break;\n","import React from \"react\";\nimport moment from \"moment\";\n\nconst Session = ({\n  sessionLength,\n  decrementSessionLengthByOneMinute,\n  incrementSessionLengthByOneMinute,\n}) => {\n  //Convert seconds in to minutes using moment.js\n  const sessionLengthInMinutes = moment\n    .duration(sessionLength, \"s\")\n    .asMinutes();\n  return (\n    <div className=\"set-time-div\" id=\"session-div\">\n      <h3 id=\"session-label\">Session time</h3>\n      <p id=\"session-length\">{sessionLengthInMinutes}</p>\n      <div>\n        <button\n          className=\"increment-decrement-button\"\n          onClick={decrementSessionLengthByOneMinute}\n        >\n          -\n        </button>\n        <button\n          className=\"increment-decrement-button\"\n          onClick={incrementSessionLengthByOneMinute}\n        >\n          +\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Session;\n","import moment from \"moment\";\nimport momentDurationFormatSetup from \"moment-duration-format\";\nimport React from \"react\";\nimport \"../styles/TimeLeft.scss\";\n\nmomentDurationFormatSetup(moment);\n\nconst TimeLeft = ({\n  timerLabel,\n  handleStartStopClick,\n  startStopButtonLabel,\n  timeLeft,\n}) => {\n  //Format time left (mm:ss)\n  const formattedTimeLeft = moment\n    .duration(timeLeft, \"s\")\n    .format(\"mm:ss\", { trim: false });\n  return (\n    <div className=\"TimeLeft\">\n      <h2 id=\"time-label\">{timerLabel}</h2>\n      <p id=\"time-left\">{formattedTimeLeft}</p>\n\n      <button id=\"startStopButton\" onClick={handleStartStopClick}>\n        {\" \"}\n        {startStopButtonLabel}\n      </button>\n    </div>\n  );\n};\n\nexport default TimeLeft;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport Break from \"./components/Break\";\nimport Session from \"./components/Session\";\nimport TimeLeft from \"./components/TimeLeft\";\nimport \"./styles/App.scss\";\n\nfunction App() {\n  const audioElement = useRef(null);\n  //State\n  const [currentSessionType, setCurrentSessionType] = useState(\"Session\"); //'Session' or 'Break'\n  const [intervalId, setIntervalId] = useState(null);\n  const [sessionLength, setSessionLength] = useState(60 * 25);\n  const [breakLength, setBreakLength] = useState(300);\n  const [timeLeft, setTimeLeft] = useState(sessionLength);\n\n  //useEffect\n  //Change timeLeft whenever sessionLength changes\n  useEffect(() => {\n    setTimeLeft(sessionLength);\n  }, [sessionLength]);\n\n  //Listen to timeLeft changes (it will fire whenever any of the values down in the dependency array changes)\n  //The code below will only happen when the time left is equal to 0\n  useEffect(() => {\n    //if timeLeft is zero\n    if (timeLeft === 0) {\n      //play the audio\n      audioElement.current.play();\n      //change session to break or break to session\n      if (currentSessionType === \"Session\") {\n        setCurrentSessionType(\"Break\");\n        setTimeLeft(breakLength);\n      } else if (currentSessionType === \"Break\") {\n        setCurrentSessionType(\"Session\");\n        setTimeLeft(sessionLength);\n      }\n    }\n  }, [breakLength, currentSessionType, sessionLength, timeLeft]);\n\n  //SESSION\n\n  //Function to decrement the session length by a minute\n  const decrementSessionLengthByOneMinute = () => {\n    const newSessionLength = sessionLength - 60;\n    if (newSessionLength > 0) {\n      setSessionLength(newSessionLength);\n    }\n  };\n\n  //Function to increment the session length by a minute\n  const incrementSessionLengthByOneMinute = () => {\n    const newSessionLength = sessionLength + 60;\n    if (newSessionLength <= 60 * 60) {\n      setSessionLength(newSessionLength);\n    }\n  };\n\n  //BREAK\n\n  //Function to decrement the break length by a minute\n  const decrementBreakLengthByOneMinute = () => {\n    const newBreakLength = breakLength - 60;\n    if (newBreakLength > 0) {\n      setBreakLength(newBreakLength);\n    }\n  };\n\n  //Function to increment the break length by a minute\n  const incrementBreakLengthByOneMinute = () => {\n    const newBreakLength = breakLength + 60;\n    if (newBreakLength <= 60 * 60) {\n      setBreakLength(newBreakLength);\n    }\n  };\n\n  //START & STOP\n\n  const isStarted = intervalId !== null;\n  const handleStartStopClick = () => {\n    if (isStarted) {\n      //if we are in started mode:\n      //we want to stop the timer\n      //to do this we use clearInterval\n      clearInterval(intervalId);\n      setIntervalId(null);\n    } else {\n      //if we are in stopped mode:\n      //decrement timeLeft by one every second (1000 ms)\n      //to do this we use setInterval\n      const newIntervalId = setInterval(() => {\n        setTimeLeft((prevTimeLeft) => prevTimeLeft - 1);\n      }, 100); //TURN INTO 1000\n      setIntervalId(newIntervalId);\n    }\n  };\n\n  const handleResetButtonClick = () => {\n    //reset audio\n    audioElement.current.load();\n    //clear the timeout interval (will stop the timer from running)\n    clearInterval(intervalId);\n    //set the intervalId to null (will let us know that no timer is running)\n    setIntervalId(null);\n    //set the session type to 'Session'\n    setCurrentSessionType(\"Session\");\n    //reset the session length to 25 minutes\n    setSessionLength(60 * 25);\n    //reset the break length to 5 minutes\n    setBreakLength(60 * 5);\n    //reset the timer to 25 minutes (initial session length)\n    setTimeLeft(60 * 25);\n  };\n  return (\n    <div className=\"App\">\n      <Session\n        sessionLength={sessionLength}\n        decrementSessionLengthByOneMinute={decrementSessionLengthByOneMinute}\n        incrementSessionLengthByOneMinute={incrementSessionLengthByOneMinute}\n      />\n      <div className=\"timer-div\">\n        <TimeLeft\n          timerLabel={currentSessionType}\n          handleStartStopClick={handleStartStopClick}\n          startStopButtonLabel={isStarted ? \"Stop\" : \"Start\"}\n          timeLeft={timeLeft}\n        />\n        <button id=\"resetButton\" onClick={handleResetButtonClick}>\n          Reset\n        </button>\n      </div>\n      <Break\n        breakLength={breakLength}\n        decrementBreakLengthByOneMinute={decrementBreakLengthByOneMinute}\n        incrementBreakLengthByOneMinute={incrementBreakLengthByOneMinute}\n      />\n\n      <audio id=\"beep\" ref={audioElement}>\n        <source\n          src=\"https://www.google.com/logos/fnbx/animal_sounds/robin.mp3\"\n          type=\"audio/mpeg\"\n        />\n      </audio>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}